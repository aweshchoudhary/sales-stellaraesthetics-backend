// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URI")
}

model User {
  id          String     @id @default(uuid())
  name        String
  firebaseUID String
  roles       ROLES      @default(USER)
  notes       Note[]
  files       File[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Contacts    Contact[]
  Deals       Deal[]
  Pipelines   Pipeline[]
  creators    Activity[] @relation("Creator")
  performers  Activity[] @relation("Performer")
}

model Label {
  id        String   @id @default(uuid())
  name      String
  color     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Deal      Deal[]
}

model Note {
  id        String   @id @default(uuid())
  note      String
  deals     String[]
  contacts  String[]
  creator   User     @relation(fields: [creatorId], references: [id])
  creatorId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model File {
  id        String   @id @default(uuid())
  name      String
  type      String
  size      BigInt
  url       String
  deals     String[]
  contacts  String[]
  uploader  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model Activity {
  id                  String        @id @default(uuid())
  name                String
  type                ActivityTypes
  start               DateTime
  end                 DateTime
  // Optional Fields
  desc                String?
  location            String?
  taskLink            String?
  googleEventId       String?
  googleEventHtmlLink String?
  icon                String
  deals               String[]
  contacts            String[]
  performer           User?         @relation("Performer", fields: [performerId], references: [id])
  performerId         String?
  creator             User          @relation("Creator", fields: [creatorId], references: [id])
  creatorId           String
  completedOn         DateTime?
  // Time Stamp
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
}

model Contact {
  id            String   @id @default(uuid())
  company       String
  contactPerson String // Fix typo in field name
  mobile        String
  whatsapp      String
  email         String
  notes         String[]
  activities    String[]
  files         String[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  creator       User     @relation(fields: [creatorId], references: [id])
  creatorId     String
}

model Deal {
  id                  String   @id @default(uuid())
  name                String
  desc                String?
  currency            String   @default("INR")
  value               Int      @default(0)
  status              STATUS   @default(OPEN)
  expectedClosingDate DateTime @default(now())
  labelId             String
  label               Label    @relation(fields: [labelId], references: [id])
  currentStage        Stage    @relation(fields: [currentStageId], references: [id])
  currentStageId      String
  contacts            String[]
  items               String[] // Assuming Item is another model
  // Activities 
  notes               String[]
  files               String[]
  activities          String[]
  creator             User     @relation(fields: [creatorId], references: [id])
  creatorId           String
  pipelineId          String
  Pipeline            Pipeline @relation(fields: [pipelineId], references: [id])

  // Time Stamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Stage {
  id         String   @id @default(uuid())
  name       String
  desc       String?
  position   Int      @default(1)
  pipelineId String
  pipeline   Pipeline @relation(fields: [pipelineId], references: [id])
  deals      Deal[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Pipeline {
  id        String   @id @default(uuid())
  name      String
  desc      String?
  stages    Stage[]
  deals     Deal[]
  assignees String[] // Assuming String is another model
  owner     User     @relation(fields: [ownerId], references: [id])
  ownerId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ROLES {
  USER
  EDITOR
  ADMIN
  SUPERUSER
}

enum ActivityTypes {
  CALL
  EMAIL
  MEETING
  TASK
}

enum STATUS {
  OPEN
  WON
  LOST
}
