// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URI")
}

model User {
  id                  String                       @id @default(uuid())
  name                String
  email               String
  mobile              String
  userId              String
  apiKey              ApiKey?
  roles               String                       @default("user")
  notifications       NotificationsOnUsers[]
  notificationsOpened NotificationsOpenByOnUsers[]
  created             UserCreated?
  createdById         String?
  createdAt           DateTime                     @default(now())
  updatedAt           DateTime                     @updatedAt
}

model ApiKey {
  id          String       @id @default(uuid())
  name        String?
  desc        String?
  key         String
  user        User         @relation(fields: [userId], references: [id])
  userId      String       @unique
  status      String       @default("active")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  createdBy   UserCreated? @relation(fields: [createdById], references: [id])
  createdById String?
}

model Notification {
  id        String                       @id @default(uuid())
  name      String
  content   String?
  sentTo    NotificationsOnUsers[]
  openBy    NotificationsOpenByOnUsers[]
  createdAt DateTime                     @default(now())
  updatedAt DateTime                     @updatedAt
}

model NotificationsOnUsers {
  notification   Notification @relation(fields: [notificationId], references: [id])
  notificationId String
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  assignedAt     DateTime     @default(now())

  @@id([notificationId, userId])
}

model NotificationsOpenByOnUsers {
  notification   Notification @relation(fields: [notificationId], references: [id])
  notificationId String
  user           User         @relation(fields: [userId], references: [id])
  userId         String
  assignedAt     DateTime     @default(now())

  @@id([notificationId, userId])
}

model UserCreated {
  id                String                 @id @default(uuid())
  user              User                   @relation(fields: [userId], references: [id])
  userId            String                 @unique
  files             File[]
  notes             Note[]
  deals             Deal[]
  contacts          Contact[]
  stages            Stage[]
  pipelines         Pipeline[]
  assignedPipelines AssigneesOnPipelines[]
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  activitiesPerform Activity[]             @relation("performedBy")
  activitiesCreated Activity[]             @relation("createdBy")
  labels            Label[]
  activityFiles     ActivityFile[]
  apikeys           ApiKey[]
  createdById       String
}

model Label {
  id          String      @id @default(uuid())
  label       String
  desc        String?
  color       String
  pipeline    Pipeline    @relation(fields: [pipelineId], references: [id])
  pipelineId  String
  createdBy   UserCreated @relation(fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  deals       Deal[]
}

model Note {
  id          String      @id @default(uuid())
  content     String
  deal        Deal        @relation(fields: [dealId], references: [id])
  dealId      String
  contact     Contact     @relation(fields: [contactId], references: [id])
  contactId   String
  createdBy   UserCreated @relation(fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model File {
  id          String      @id @default(uuid())
  name        String
  desc        String?
  size        BigInt
  type        String
  url         String
  deal        Deal        @relation(fields: [dealId], references: [id])
  dealId      String
  contact     Contact     @relation(fields: [contactId], references: [id])
  contactId   String
  createdBy   UserCreated @relation(fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Activity {
  id                  String         @id @default(uuid())
  name                String
  desc                String?
  type                String
  start               DateTime
  end                 DateTime
  location            String?
  taskLink            String?
  googleEventId       String?
  googleEventHtmlLink String?
  completedOn         DateTime?
  performer           UserCreated?   @relation("performedBy", fields: [performerId], references: [id])
  performerId         String?
  createdBy           UserCreated?   @relation("createdBy", fields: [createdById], references: [id])
  createdById         String?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  files               ActivityFile[]
  deal                Deal           @relation(fields: [dealId], references: [id])
  dealId              String
  contact             Contact        @relation(fields: [contactId], references: [id])
  contactId           String
}

model ActivityFile {
  id          String      @id @default(uuid())
  activity    Activity    @relation(fields: [activityId], references: [id])
  activityId  String
  desc        String?
  name        String
  path        String
  url         String
  type        String
  size        BigInt
  createdById String
  createdBy   UserCreated @relation(fields: [createdById], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Contact {
  id          String      @id @default(uuid())
  fullname    String
  companyName String?
  mobile      String
  whatsapp    String
  email       String
  createdById String
  createdBy   UserCreated @relation(fields: [createdById], references: [id])
  notes       Note[]
  activities  Activity[]
  files       File[]
  deal        Deal[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Deal {
  id                  String       @id @default(uuid())
  name                String?
  desc                String?
  currency            String       @default("INR")
  value               Int          @default(0)
  status              String       @default("open")
  expectedClosingDate DateTime     @default(now())
  labelId             String?
  label               Label?       @relation(fields: [labelId], references: [id])
  currentStage        Stage        @relation(fields: [currentStageId], references: [id])
  currentStageId      String
  contact             Contact      @relation(fields: [contactId], references: [id])
  contactId           String
  notes               Note[]
  files               File[]
  activities          Activity[]
  pipelineId          String
  pipeline            Pipeline     @relation(fields: [pipelineId], references: [id])
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  createdById         String
  createdBy           UserCreated? @relation(fields: [createdById], references: [id])
  // items               String[] // Assuming Item is another model
}

model Stage {
  id          String      @id @default(uuid())
  name        String
  desc        String?
  position    Int         @default(1)
  pipelineId  String
  pipeline    Pipeline    @relation(fields: [pipelineId], references: [id])
  deals       Deal[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  createdById String
  createdBy   UserCreated @relation(fields: [createdById], references: [id])
}

model Pipeline {
  id          String                 @id @default(uuid())
  name        String
  desc        String?
  stages      Stage[]
  deals       Deal[]
  assignees   AssigneesOnPipelines[]
  createdBy   UserCreated            @relation(fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  Label       Label[]
}

model AssigneesOnPipelines {
  pipeline   Pipeline    @relation(fields: [pipelineId], references: [id])
  pipelineId String
  asignees   UserCreated @relation(fields: [assigneeId], references: [id])
  assigneeId String
  assignedAt DateTime    @default(now())

  @@id([pipelineId, assigneeId])
}

enum ROLES {
  USER
  EDITOR
  ADMIN
  SUPERUSER
}

enum ActivityTypes {
  CALL
  EMAIL
  MEETING
  TASK
}

enum STATUS {
  OPEN
  WON
  LOST
}
