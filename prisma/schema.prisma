// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URI")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String
  mobile    String
  userId    String
  roles     ROLES    @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserCreated {
  id                String     @id @default(uuid())
  userId            String
  files             File[]
  notes             Note[]
  deals             Deal[]
  contacts          Contact[]
  stages            Stage[]
  pipelines         Pipeline[]
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  activitiesPerform Activity[] @relation("performedBy")
  activitiesCreated Activity[] @relation("createdBy")
  Label             Label[]
}

model Label {
  id         String      @id @default(uuid())
  label      String
  desc       String?
  color      String
  pipeline   Pipeline    @relation(fields: [pipelineId], references: [id])
  pipelineId String
  creator    UserCreated @relation(fields: [creatorId], references: [id])
  creatorId  String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  deals      Deal[]
}

model Note {
  id        String      @id @default(uuid())
  content   String
  deal      Deal        @relation(fields: [dealId], references: [id])
  dealId    String
  contact   Contact     @relation(fields: [contactId], references: [id])
  contactId String
  creator   UserCreated @relation(fields: [creatorId], references: [id])
  creatorId String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model File {
  id         String       @id @default(uuid())
  name       String
  desc       String?
  size       BigInt
  type       String
  url        String
  deal       Deal         @relation(fields: [dealId], references: [id])
  dealId     String
  contact    Contact      @relation(fields: [contactId], references: [id])
  contactId  String
  uploader   UserCreated? @relation(fields: [uploaderId], references: [id])
  uploaderId String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Activity   Activity?    @relation(fields: [activityId], references: [id])
  activityId String?
}

// name: string;
//   type: string;
//   start: Date;
//   end: Date;
//   completed_on: Date | null;

//   desc?: string;
//   location?: string;
//   taskLink?: string;
//   googleEventId?: string;
//   googleEventHtmlLink?: string;

//   files: ActivityFiles[];
//   performer: string | (UserBaseInterface & BaseModel);
//   creator: string | (UserBaseInterface & BaseModel);
//   dealId: string | (DealBaseInterface & BaseModel);
//   contacts: string | (UserBaseInterface & BaseModel)[];

model Activity {
  id                  String         @id @default(uuid())
  name                String
  desc                String?
  type                String
  start               DateTime
  end                 DateTime
  location            String?
  taskLink            String?
  googleEventId       String?
  googleEventHtmlLink String?
  completedOn         DateTime?
  performer           UserCreated?   @relation("performedBy", fields: [performerId], references: [id])
  performerId         String?
  creator             UserCreated?   @relation("createdBy", fields: [creatorId], references: [id])
  creatorId           String?
  files               File[]
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  ActivityFiles       ActivityFile[]
  Deal                Deal           @relation(fields: [dealId], references: [id])
  dealId              String
  contact             Contact        @relation(fields: [contactId], references: [id])
  contactId           String
}

model ActivityFile {
  id         String   @id @default(uuid())
  activity   Activity @relation(fields: [activityId], references: [id])
  activityId String
  desc       String?
  name       String
  path       String
  url        String
  type       String
  size       BigInt
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// fullname: string;
//   companyName?: string;
//   mobile: string;
//   whatsapp: string;
//   email: string;

model Contact {
  id          String       @id @default(uuid())
  fullname    String
  companyName String?
  mobile      String
  whatsapp    String
  email       String
  creatorId   String?
  creator     UserCreated? @relation(fields: [creatorId], references: [id])
  notes       Note[]
  activities  Activity[]
  files       File[]
  deal        Deal[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Deal {
  id                  String       @id @default(uuid())
  name                String
  desc                String?
  currency            String       @default("INR")
  value               Int          @default(0)
  status              STATUS       @default(OPEN)
  expectedClosingDate DateTime     @default(now())
  labelId             String?
  label               Label?       @relation(fields: [labelId], references: [id])
  currentStage        Stage        @relation(fields: [currentStageId], references: [id])
  currentStageId      String
  contact             Contact      @relation(fields: [contactId], references: [id])
  contactId           String
  items               String[] // Assuming Item is another model
  notes               Note[]
  files               File[]
  activities          Activity[]
  pipelineId          String
  pipeline            Pipeline     @relation(fields: [pipelineId], references: [id])
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  userCreatedId       String?
  UserCreated         UserCreated? @relation(fields: [userCreatedId], references: [id])
}

model Stage {
  id            String       @id @default(uuid())
  name          String
  desc          String?
  position      Int          @default(1)
  pipelineId    String
  pipeline      Pipeline     @relation(fields: [pipelineId], references: [id])
  deals         Deal[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  userCreatedId String?
  UserCreated   UserCreated? @relation(fields: [userCreatedId], references: [id])
}

model Pipeline {
  id        String      @id @default(uuid())
  name      String
  desc      String?
  stages    Stage[]
  deals     Deal[]
  // assignees     UserCreated[]
  owner     UserCreated @relation(fields: [ownerId], references: [id])
  ownerId   String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Label     Label[]
}

enum ROLES {
  USER
  EDITOR
  ADMIN
  SUPERUSER
}

enum ActivityTypes {
  CALL
  EMAIL
  MEETING
  TASK
}

enum STATUS {
  OPEN
  WON
  LOST
}
